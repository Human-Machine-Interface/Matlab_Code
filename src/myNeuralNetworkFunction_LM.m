function [y1] = myNeuralNetworkFunction_LM(x1)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 10-Jul-2021 18:48:26.
%
% [y1] = myNeuralNetworkFunction(x1) takes these arguments:
%   x = Qx5 matrix, input #1
% and returns:
%   y = Qx1 matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [0.608695652173913;0.82370820668693;0.433566433566434;0.0124984476084822;0];
x1_step1.gain = [5.11111111111111;11.3448275862069;3.53086419753086;2.02531327181859;2];
x1_step1.ymin = -1;

% Layer 1
b1 = [1.8724896185779345004;3.4594936098855657569;3.3572268535369791387;-0.29203549084285906901;-0.8726513156884275757;0.78941732481810922284;1.3414134331943117218;-0.51251161722933502585;1.8980116551519634616;2.5206186731071547058];
IW1_1 = [-1.7473163001251021953 -0.52380489643904948327 1.2083445192483994735 1.4121920229388051915 0.1470326077282326227;-1.4398191902597763381 -0.1138388021166337194 2.8762882242182987724 -0.32157969272880876366 -0.47348523585147073156;-1.6794588499581348806 0.050889258133554937658 3.0255704950131838693 -0.177426667337804711 -0.50678936515263606211;-0.66277504308397938715 -0.064137112987868241665 0.52450132119115244755 -0.47598958762618909235 -1.8337234409168154947;2.5318003426495949704 -0.34179138555483395967 0.2599185613204739731 0.72882777561942424516 -0.66269004320301028166;-2.2347821706804689157 0.50778465783452764182 -0.028432305534869854735 -0.66042251408108187949 0.58450068033800650635;1.6744626766873442758 0.16878306987343533185 4.4897766655560360505 -0.95485188948777932616 0.63350916158124470634;0.043275560653666833577 -0.097868040296867533923 1.2052714369100034908 0.086872955796664916295 0.065966839161944540448;0.26363738389490998237 -2.331800513926644669 -0.65367750036927696478 0.63823956898279921024 -0.9640812000232676926;0.038270713860012954555 -0.5484493603549833729 0.28994128684802461526 -0.26139974473703286861 -0.85731625538164424327];

% Layer 2
b2 = 0.15811020839946907102;
LW2_1 = [-0.02757355062328158829 -1.7736431126248146661 1.0573718715528008794 0.052263687541454627306 0.34090304701506030094 0.39753191937780052445 0.21364760407495961281 0.83577704289809906513 -0.033172188675959057846 0.82410302048997052804];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 3.53086419753086;
y1_step1.xoffset = 0.433566433566434;

% ===== SIMULATION ========

% Dimensions
Q = size(x1,1); % samples

% Input 1
x1 = x1';
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = repmat(b2,1,Q) + LW2_1*a1;

% Output 1
y1 = mapminmax_reverse(a2,y1_step1);
y1 = y1';
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
