function [y1] = myNeuralNetworkFunction_BR(x1)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 10-Jul-2021 18:46:26.
%
% [y1] = myNeuralNetworkFunction(x1) takes these arguments:
%   x = Qx5 matrix, input #1
% and returns:
%   y = Qx1 matrix, output #1
% where Q is the number of samples.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [0.608695652173913;0.82370820668693;0.433566433566434;0.0124984476084822;0];
x1_step1.gain = [5.11111111111111;11.3448275862069;3.53086419753086;2.02531327181859;2];
x1_step1.ymin = -1;

% Layer 1
b1 = [1.1509234858858428119;-1.1332623513765525125;-1.1007503701446177402;0.62739261384290601065;1.7184267632819993921;-1.3786395406229501326;-0.48523197788298144673;0.31885029690919924894;-2.2204191500769425716;0.89406155650394925072];
IW1_1 = [7.3457773829270767152 1.7646180922248364542 1.2839479676726881507 2.5260763068044203017 -0.25823236281581435358;-6.3229814406941526883 -1.0301195179990618733 -0.68284531794879932409 -2.7708341387190400518 0.21850429903643003859;-6.5948683127640146395 -1.3792744009924877702 -0.95735968470308585587 -2.5471328293934831777 0.22578672768941823734;-0.10187522506440727099 -1.8692647235963737451 0.084984548694198663865 1.4939761553664225868 -0.06603917670128968409;-0.21338317459463074233 -0.091765892315169309001 -2.165579061179174758 0.30942625280376395702 -0.076643942544703871911;0.13379360954079902446 0.34835080760003805933 1.1384461153788414389 -0.49566337171390328908 0.040599058661255030267;-0.19771955369619104159 0.51493094435956165977 -2.1737437604217904052 -0.22575853290674816054 -0.03775571827297025812;0.080828625360193195881 -1.5025821845695117585 0.41212194554665437796 0.98151462135475187054 0.0099765143696053243394;2.0653365179647589223 2.0235908053696274322 -1.2411228302969878889 -3.8816262357520971982 0.25146285112403216067;-0.2481337578588046211 -1.8275471820672741785 -0.14127825857092160544 1.9615793454505874305 -0.12091045813696274513];

% Layer 2
b2 = -0.50991301167150004936;
LW2_1 = [-1.5617474378806459612 1.5681328886359273689 -3.1350851505223213955 1.2586840786747979237 -1.3395820084502219061 -1.6538927243428123148 -0.81752240589855795783 -1.0762781212540490916 -0.056646277025136838879 -0.68200671278595292879];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 3.53086419753086;
y1_step1.xoffset = 0.433566433566434;

% ===== SIMULATION ========

% Dimensions
Q = size(x1,1); % samples

% Input 1
x1 = x1';
xp1 = mapminmax_apply(x1,x1_step1);

% Layer 1
a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*xp1);

% Layer 2
a2 = repmat(b2,1,Q) + LW2_1*a1;

% Output 1
y1 = mapminmax_reverse(a2,y1_step1);
y1 = y1';
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
