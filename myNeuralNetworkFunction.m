<<<<<<< HEAD
function [y1,xf1] = myNeuralNetworkFunction(x1,xi1)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 20-May-2021 20:48:26.
%
% [y1,xf1] = myNeuralNetworkFunction(x1,xi1) takes these arguments:
%   x1 = 1xTS matrix, input #1
%   xi1 = 1x2 matrix, initial 2 delay states for input #1.
% and returns:
%   y1 = 1xTS matrix, output #1
%   xf1 = 1x2 matrix, final 2 delay states for input #1.
% where TS is the number of timesteps.

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = 94.58553159649;
x1_step1.gain = 0.21863571669713;
x1_step1.ymin = -1;

% Layer 1
b1 = [4.2279036080618448423;3.9311383644133366388;2.6407921955670299319;1.1494384451168666583;-0.3872361421551586691;0.40778320955827107586;-0.93502292489733984659;1.6883739533640202968;-4.0064942523523416895;-3.9992981170346295627];
IW1_1 = [-4.4824530208765578365 -0.99402785986516462025;-3.7369864244822963428 2.6295196173739991963;-2.934580241189569616 3.9073002915321679573;-3.4316726561619312896 -2.751163240985411651;4.5099958159574065064 -0.12956714112193384869;3.861629392077891243 -0.42220417935404186416;-3.2084546035879193404 4.1082298512755528463;4.9759604475605980767 2.083277882863997732;-3.438498262123788507 1.5152369993008387716;-1.1318797381484335673 -4.049280109266133465];

% Layer 2
b2 = -1.5988856340073318574;
LW2_1 = [0.14804685368922643196 1.4818429711886436095 -1.1970422786508976287 -0.035288080156094574213 0.29438850919131021033 -0.85248871290863525996 -0.33302195598138195631 0.51243561703383888606 -0.14712019677052498579 -0.4545825093657334115];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.21863571669713;
y1_step1.xoffset = 94.58553159649;

% ===== SIMULATION ========

% Dimensions
TS = size(x1,2); % timesteps

% Input 1 Delay States
xd1 = mapminmax_apply(xi1,x1_step1);
xd1 = [xd1 zeros(1,1)];

% Allocate Outputs
y1 = zeros(1,TS);

% Time loop
for ts=1:TS
    
    % Rotating delay state position
    xdts = mod(ts+1,3)+1;
    
    % Input 1
    xd1(:,xdts) = mapminmax_apply(x1(:,ts),x1_step1);
    
    % Layer 1
    tapdelay1 = reshape(xd1(:,mod(xdts-[1 2]-1,3)+1),2,1);
    a1 = tansig_apply(b1 + IW1_1*tapdelay1);
    
    % Layer 2
    a2 = b2 + LW2_1*a1;
    
    % Output 1
    y1(:,ts) = mapminmax_reverse(a2,y1_step1);
end

% Final delay states
finalxts = TS+(1: 2);
xits = finalxts(finalxts<=2);
xts = finalxts(finalxts>2)-2;
xf1 = [xi1(:,xits) x1(:,xts)];
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
=======
function [y1,xf1] = myNeuralNetworkFunction(x1,xi1)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 20-May-2021 20:48:26.
%
% [y1,xf1] = myNeuralNetworkFunction(x1,xi1) takes these arguments:
%   x1 = 1xTS matrix, input #1
%   xi1 = 1x2 matrix, initial 2 delay states for input #1.
% and returns:
%   y1 = 1xTS matrix, output #1
%   xf1 = 1x2 matrix, final 2 delay states for input #1.
% where TS is the number of timesteps.

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = 94.58553159649;
x1_step1.gain = 0.21863571669713;
x1_step1.ymin = -1;

% Layer 1
b1 = [4.2279036080618448423;3.9311383644133366388;2.6407921955670299319;1.1494384451168666583;-0.3872361421551586691;0.40778320955827107586;-0.93502292489733984659;1.6883739533640202968;-4.0064942523523416895;-3.9992981170346295627];
IW1_1 = [-4.4824530208765578365 -0.99402785986516462025;-3.7369864244822963428 2.6295196173739991963;-2.934580241189569616 3.9073002915321679573;-3.4316726561619312896 -2.751163240985411651;4.5099958159574065064 -0.12956714112193384869;3.861629392077891243 -0.42220417935404186416;-3.2084546035879193404 4.1082298512755528463;4.9759604475605980767 2.083277882863997732;-3.438498262123788507 1.5152369993008387716;-1.1318797381484335673 -4.049280109266133465];

% Layer 2
b2 = -1.5988856340073318574;
LW2_1 = [0.14804685368922643196 1.4818429711886436095 -1.1970422786508976287 -0.035288080156094574213 0.29438850919131021033 -0.85248871290863525996 -0.33302195598138195631 0.51243561703383888606 -0.14712019677052498579 -0.4545825093657334115];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 0.21863571669713;
y1_step1.xoffset = 94.58553159649;

% ===== SIMULATION ========

% Dimensions
TS = size(x1,2); % timesteps

% Input 1 Delay States
xd1 = mapminmax_apply(xi1,x1_step1);
xd1 = [xd1 zeros(1,1)];

% Allocate Outputs
y1 = zeros(1,TS);

% Time loop
for ts=1:TS
    
    % Rotating delay state position
    xdts = mod(ts+1,3)+1;
    
    % Input 1
    xd1(:,xdts) = mapminmax_apply(x1(:,ts),x1_step1);
    
    % Layer 1
    tapdelay1 = reshape(xd1(:,mod(xdts-[1 2]-1,3)+1),2,1);
    a1 = tansig_apply(b1 + IW1_1*tapdelay1);
    
    % Layer 2
    a2 = b2 + LW2_1*a1;
    
    % Output 1
    y1(:,ts) = mapminmax_reverse(a2,y1_step1);
end

% Final delay states
finalxts = TS+(1: 2);
xits = finalxts(finalxts<=2);
xts = finalxts(finalxts>2)-2;
xf1 = [xi1(:,xits) x1(:,xts)];
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
>>>>>>> 3b839e76618bbefeca2457ec7b584fdf4d4f22cf
